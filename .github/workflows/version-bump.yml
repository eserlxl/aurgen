name: Auto Version Bump

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'VERSION'
      - 'doc/VERSIONING.md'
      - '.github/workflows/version-bump.yml'

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Check for version bump commits
      id: check-commits
      run: |
        # Get commits since last tag
        if git describe --tags --abbrev=0 2>/dev/null; then
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "Last tag: $LAST_TAG"
          COMMITS=$(git log --oneline $LAST_TAG..HEAD)
        else
          echo "No tags found, using all commits"
          COMMITS=$(git log --oneline)
        fi
        
        # Sanitize commit messages for GitHub Actions output
        # Create a simple summary instead of raw commit messages
        COMMIT_COUNT=$(echo "$COMMITS" | wc -l)
        SANITIZED_COMMITS="Total commits since last tag: $COMMIT_COUNT"
        
        echo "Commit count: $COMMIT_COUNT"
        echo "First few commits:"
        echo "$COMMITS" | head -5
        
        # Check for conventional commit types
        if echo "$COMMITS" | grep -q "^[a-f0-9]* feat:"; then
          echo "Found feat commits"
          echo "bump_type=minor" >> $GITHUB_OUTPUT
          echo "found_feat=true" >> $GITHUB_OUTPUT
        elif echo "$COMMITS" | grep -q "^[a-f0-9]* fix:"; then
          echo "Found fix commits"
          echo "bump_type=patch" >> $GITHUB_OUTPUT
          echo "found_fix=true" >> $GITHUB_OUTPUT
        elif echo "$COMMITS" | grep -q "^[a-f0-9]* BREAKING CHANGE:"; then
          echo "Found breaking change commits"
          echo "bump_type=major" >> $GITHUB_OUTPUT
          echo "found_breaking=true" >> $GITHUB_OUTPUT
        else
          echo "No conventional commits found"
          echo "bump_type=none" >> $GITHUB_OUTPUT
        fi
        
        echo "commits_since_last_tag=$SANITIZED_COMMITS" >> $GITHUB_OUTPUT
    
    - name: Bump version if needed
      if: steps.check-commits.outputs.bump_type != 'none'
      run: |
        echo "Bumping version type: ${{ steps.check-commits.outputs.bump_type }}"
        
        # Make sure the script is executable
        chmod +x ./dev-bin/bump-version
        
        # Show current version
        echo "Current version: $(cat VERSION)"
        
        # Bump version
        ./dev-bin/bump-version ${{ steps.check-commits.outputs.bump_type }} --commit --tag
        
        # Show new version
        echo "New version: $(cat VERSION)"
        
        # Push changes
        echo "Pushing to main branch..."
        git push origin main
        
        echo "Pushing tags..."
        git push origin --tags
    
    - name: Create Release
      if: steps.check-commits.outputs.bump_type != 'none'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v$(cat VERSION)
        release_name: Release v$(cat VERSION)
        body: |
          ## Changes in this release
          
          Automated release for version ${{ steps.check-commits.outputs.bump_type }} bump.
          
          ## Version Bump Type
          - **${{ steps.check-commits.outputs.bump_type }}** version bump
          
          ## Commit Summary
          ${{ steps.check-commits.outputs.commits_since_last_tag }}
          
          See the git log for detailed changes.
          
          ---
          *This release was automatically generated by GitHub Actions.*
        draft: false
        prerelease: false 