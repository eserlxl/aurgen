#!/bin/bash
# Copyright Â© 2025 Eser KUBALI <lxldev.contact@gmail.com>
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of AURGen project and is licensed under
# the GNU General Public License v3.0 or later.
# See the LICENSE file in the project root for details.

# AURGen main CLI entrypoint

# Get version from VERSION file
SCRIPT_DIR="$(dirname "$(realpath "$0")")"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
VERSION_FILE="$PROJECT_ROOT/VERSION"

if [[ -f "$VERSION_FILE" ]]; then
    AURGEN_VERSION=$(tr -d '[:space:]' < "$VERSION_FILE")
else
    AURGEN_VERSION="unknown"
fi

export AURGEN_VERSION
# Ensure /tmp/aurgen exists
mkdir -p /tmp/aurgen

# Set log file paths
AURGEN_LOG="${AURGEN_LOG:-/tmp/aurgen/aurgen.log}"
AURGEN_ERROR_LOG="${AURGEN_ERROR_LOG:-/tmp/aurgen/aurgen-error.log}"
export AURGEN_LOG
export AURGEN_ERROR_LOG

# Clear logs at start
: > "$AURGEN_LOG"
: > "$AURGEN_ERROR_LOG"

# Set library and debug level based on RELEASE mode
# RELEASE=1 (or true): use system lib path (/usr/lib/aurgen) and disable debug logging (DEBUG_LEVEL=0)
# RELEASE=0 (default): use local lib (../lib) and enable debug logging (DEBUG_LEVEL=1)
# If running in CI, force RELEASE=0 unless already set
if [[ -n "$CI" && -z "${RELEASE+x}" ]]; then
    RELEASE=0
fi
RELEASE=${RELEASE:-1}
if [[ "$RELEASE" == "1" || "$RELEASE" == "true" ]]; then
    LIB_INSTALL_DIR="/usr/lib/aurgen"
    if [[ ! -d "$LIB_INSTALL_DIR" ]]; then
        printf '%b[WARNING] AURGen release library directory not found: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$LIB_INSTALL_DIR" "${RESET:-}" >&2
        printf '%b\n' "${RED:-}" >&2
        printf '%bFalling back to development mode (RELEASE=0) in 5 seconds...%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%b\n' "${RED:-}" >&2
        sleep 5
        # Fall back to development mode
        RELEASE=0
        # Reset LIB_INSTALL_DIR to ensure it gets set by development mode logic
        unset LIB_INSTALL_DIR
    fi
fi

if [[ "$RELEASE" == "1" || "$RELEASE" == "true" ]]; then
    export DEBUG_LEVEL=0
else
    # Fallback search for development lib dir
    if [[ -n "$AURGEN_LIB_DIR" && -d "$AURGEN_LIB_DIR" ]]; then
        LIB_INSTALL_DIR="$AURGEN_LIB_DIR"
    elif [[ -d "$PROJECT_ROOT/lib" ]]; then
        LIB_INSTALL_DIR="$PROJECT_ROOT/lib"
    elif [[ -d "$(dirname "$(realpath "$0")")/../lib" ]]; then
        LIB_INSTALL_DIR="$(dirname "$(realpath "$0")")/../lib"
    elif [[ -d "$PWD/lib" ]]; then
        LIB_INSTALL_DIR="$PWD/lib"
    elif [[ -d "$PWD/../lib" ]]; then
        LIB_INSTALL_DIR="$PWD/../lib"
    else
        printf '%bCould not locate AURGen lib directory%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%b\n' "${RED:-}" >&2
        printf '%bTried the following locations:%b\n' "${RED:-}" "${RESET:-}" >&2
        if [[ -n "$AURGEN_LIB_DIR" ]]; then
            printf '%b  AURGEN_LIB_DIR: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$AURGEN_LIB_DIR" "${RESET:-}" >&2
        fi
        printf '%b  Project root: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$PROJECT_ROOT/lib" "${RESET:-}" >&2
        libdir="$(dirname "$(realpath "$0")")"
        printf '%b  Script relative: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$libdir/../lib" "${RESET:-}" >&2
        printf '%b  Current directory: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$PWD/lib" "${RESET:-}" >&2
        printf '%b  Parent directory: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$PWD/../lib" "${RESET:-}" >&2
        printf '%b\n' "${RED:-}" >&2
        printf '%bPlease ensure the lib/ directory is available at one of these locations,%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%bor set the %b%s%b environment variable to point to the lib directory.%b\n' "${RED:-}" "${CYAN:-}" "AURGEN_LIB_DIR" "${RESET:-}" "${RESET:-}" >&2
        exit 1
    fi
    export DEBUG_LEVEL=1
    echo "[INFO] AURGen is running in DEVELOPMENT mode (RELEASE=0)."
    echo "[INFO] Debug level: $DEBUG_LEVEL"
fi

# Source initialization and helpers
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/helpers.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/valid-modes.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/init.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/tool-mapping.sh"
# Source mode-specific and shared helpers
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/modes/aur.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/modes/aur-git.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/modes/local.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/modes/clean.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/modes/lint.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/modes/golden.sh"
# shellcheck source=/dev/null
source "$LIB_INSTALL_DIR/modes/test.sh"
# shellcheck source=/dev/null
[ -f "$LIB_INSTALL_DIR/git.sh" ] && source "$LIB_INSTALL_DIR/git.sh"
# shellcheck source=/dev/null
[ -f "$LIB_INSTALL_DIR/gpg.sh" ] && source "$LIB_INSTALL_DIR/gpg.sh"


# --- Mode Logic ---

# Initialize variables from environment or defaults before flag parsing
if [[ -n "${CI:-}" ]]; then
    # shellcheck disable=SC2034 # Used in sourced scripts
    color_enabled=0
else
    # shellcheck disable=SC2034 # Used in sourced scripts
    color_enabled=1
fi
# shellcheck disable=SC2034 # Used in sourced scripts
ascii_armor=${ASCII_ARMOR_DEFAULT:-0}
# shellcheck disable=SC2034 # Used in sourced scripts
dry_run=0
# shellcheck disable=SC2034 # Used in sourced scripts
no_wait=0
# shellcheck disable=SC2034 # Used in sourced scripts
maxdepth=5

# Use getopt for unified short and long option parsing
if ! command -v getopt >/dev/null 2>&1; then
    if (( color_enabled )); then
        printf '%bMissing required tool: %b%s%b\n' "${RED:-}" "${CYAN:-}" "getopt" "${RESET:-}" >&2
        printf '%b[AURGen] Hint: Install %b%s%b with: %bsudo pacman -S %s%b (GNU getopt required)%b\n' \
            "${YELLOW:-}" "${CYAN:-}" "getopt" "${YELLOW:-}" "${GREEN:-}" "util-linux" "${YELLOW:-}" "${RESET:-}"
        printf '%b\n' "${RED:-}" >&2
        printf '%bNote: AURGen requires GNU getopt from util-linux package.%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%bBSD/macOS getopt implementations are not supported.%b\n' "${RED:-}" "${RESET:-}" >&2
    else
        printf '%bMissing required tool: %b%s%b\n' "${RED:-}" "${CYAN:-}" "getopt" "${RESET:-}" >&2
        printf '%b[AURGen] Hint: Install %b%s%b with: %bsudo pacman -S %s%b (GNU getopt required)%b\n' \
            "${YELLOW:-}" "${CYAN:-}" "getopt" "${YELLOW:-}" "${GREEN:-}" "util-linux" "${YELLOW:-}" "${RESET:-}"
        printf '%b\n' "${RED:-}" >&2
        printf '%bNote: AURGen requires GNU getopt from util-linux package.%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%bBSD/macOS getopt implementations are not supported.%b\n' "${RED:-}" "${RESET:-}" >&2
    fi
    exit 1
fi
if ! output=$(getopt -o nadhv --long no-color,ascii-armor,dry-run,help,usage,no-wait,maxdepth:,version -- "${@}") || [[ "$output" != *"--"* ]]; then
    if (( color_enabled )); then
        printf '%bGNU getopt required (util-linux).%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%b[AURGen] Hint: Install %b%s%b with: %bsudo pacman -S %s%b\n' \
            "${YELLOW:-}" "${CYAN:-}" "getopt" "${YELLOW:-}" "${GREEN:-}" "util-linux" "${RESET:-}"
    else
        printf '%bGNU getopt required (util-linux).%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%b[AURGen] Hint: Install %b%s%b with: %bsudo pacman -S %s%b\n' \
            "${YELLOW:-}" "${CYAN:-}" "getopt" "${YELLOW:-}" "${GREEN:-}" "util-linux" "${RESET:-}"
    fi
    exit 1
fi
trap - ERR
set +e
getopt_output=$(getopt --shell bash -o nadhv --long no-color,ascii-armor,dry-run,help,usage,no-wait,maxdepth:,version -- "$@")
getopt_status=$?
set -e
trap 'printf "%b[FATAL] %b%s%b:%b%s%b: %b%s%b\n" "${RED:-}" "${CYAN:-}" "${BASH_SOURCE[0]}" "${RED:-}" "${LINENO}" "${RED:-}" "${BASH_COMMAND}" "${RESET:-}" >&2' ERR
if (( getopt_status != 0 )); then
    printf 'Error: Failed to parse options.\n' >&2
    help
    exit 1
fi
eval set -- "$getopt_output"
while true; do
    case "$1" in
        -n|--no-color)
            # shellcheck disable=SC2034 # Used in sourced scripts
            color_enabled=0; shift ;;
        -a|--ascii-armor)
            # shellcheck disable=SC2034 # Used in sourced scripts
            ascii_armor=1; shift ;;
        -d|--dry-run)
            # shellcheck disable=SC2034 # Used in sourced scripts
            dry_run=1; shift ;;
        --no-wait)
            # shellcheck disable=SC2034 # Used in sourced scripts
            no_wait=1; shift ;;
        --maxdepth)
            # shellcheck disable=SC2034 # Used in sourced scripts
            maxdepth="$2"; shift 2 ;;
        -h|--help)
            help; exit 0 ;;
        -v|--version)
            echo "aurgen version $AURGEN_VERSION"
            exit 0 ;;
        --usage)
            usage; exit 0 ;;
        --)
            shift; break ;;
        *)
            printf '%bUnknown option: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$1" "${RESET:-}" >&2; help; exit 1 ;;
    esac
    # No need to call init_colors here
    # We'll call it once after all flags are parsed
    # This ensures color_enabled is set correctly
    # and color variables are initialized accordingly
    # (see below)
done

# Export maxdepth for use in sourced scripts
export MAXDEPTH="$maxdepth"

init_colors

# If no mode is given, print usage and exit
if [[ -z ${1:-} ]]; then
    usage
    exit 1
fi
MODE=$1
shift
if [[ $# -gt 0 ]]; then
    printf '%bUnexpected argument(s): %b%s%b\n' "${RED:-}" "${CYAN:-}" "$*" "${RESET:-}" >&2
    usage
    exit 1
fi
if ! is_valid_mode "$MODE"; then
    # Suggest closest valid mode
    closest=""
    min_dist=999
    for m in "${VALID_MODES[@]}"; do
        dist=$(awk -v a="$MODE" -v b="$m" '
        function min(x,y){return x<y?x:y}
        BEGIN{
            n=length(a); m=length(b)
            for(i=0;i<=n;i++) d[i,0]=i
            for(j=0;j<=m;j++) d[0,j]=j
            for(i=1;i<=n;i++) {
                for(j=1;j<=m;j++) {
                    cost=(substr(a,i,1)==substr(b,j,1)?0:1)
                    d[i,j]=min(min(d[i-1,j]+1,d[i,j-1]+1),d[i-1,j-1]+cost)
                }
            }
            print d[n,m]
        }')
        if (( dist < min_dist )); then
            min_dist=$dist
            closest=$m
        fi
    done
    if (( min_dist <= 3 )); then
        printf '%bUnknown mode: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$MODE" "${RESET:-}" >&2
        printf '%bDid you mean "%b%s%b"?%b\n' "${YELLOW:-}" "${CYAN:-}" "$closest" "${YELLOW:-}" "${RESET:-}" >&2
        exit 1
    else
        printf '%bUnknown mode: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$MODE" "${RESET:-}" >&2
        usage
        exit 1
    fi
fi

# Only now perform side-effectful initialization
# (after mode is validated and not just help/usage)
export AURGEN_MODE="$MODE"
aurgen_init

# --- Dependency checks: fail fast if required tools are missing ---
case "$MODE" in
    local)
        require makepkg updpkgsums curl || exit 1
        ;;
    aur)
        require makepkg updpkgsums curl gpg jq || exit 1
        ;;
    aur-git)
        require makepkg || exit 1
        ;;
    lint)
        require bash || exit 1
        # Note: shellcheck is optional for lint mode - it will be skipped if not available
        ;;
    golden)
        require makepkg updpkgsums curl gpg jq || exit 1
        ;;
    # clean and test modes do not require special tools
esac

# Clean up any existing files after initialization
case "$MODE" in
    local|aur|aur-git)
        cleanup
        ;;
esac

# Enforce GitHub project requirement
REPO_URL=$(git config --get remote.origin.url || true)
if [[ ! "$REPO_URL" =~ github.com[:/][^/]+/[^/]+(.git)?$ ]]; then
    if (( color_enabled )); then
        printf '%bAURGen only supports GitHub projects%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%b\n' "${RED:-}" >&2
        if [[ -n "$REPO_URL" ]]; then
            printf '%bCurrent repository URL: %b%s%b\n' "${RED:-}" "${CYAN:-}" "$REPO_URL" "${RESET:-}" >&2
            printf '%bThis does not appear to be a GitHub repository.%b\n' "${RED:-}" "${RESET:-}" >&2
        else
            printf '%bNo remote origin URL found. Please set up a GitHub remote:%b\n' "${RED:-}" "${RESET:-}" >&2
            printf '%b  %b%s%b\n' "${RED:-}" "${GREEN:-}" "git remote add origin https://github.com/username/repository.git" "${RESET:-}" >&2
        fi
        printf '%b\n' "${RED:-}" >&2
        printf '%bAURGen is designed specifically for GitHub projects and requires%b\n' "${RED:-}" "${RESET:-}" >&2
        printf '%ba valid GitHub repository URL to function properly.%b\n' "${RED:-}" "${RESET:-}" >&2
    else
        err "AURGen only supports GitHub projects"
        err ""
        if [[ -n "$REPO_URL" ]]; then
            err "Current repository URL: $REPO_URL"
            err "This does not appear to be a GitHub repository."
        else
            err "No remote origin URL found. Please set up a GitHub remote:"
            err "  git remote add origin https://github.com/username/repository.git"
        fi
        err ""
        err "AURGen is designed specifically for GitHub projects and requires"
        err "a valid GitHub repository URL to function properly."
    fi
    exit 1
fi

log "Running in \"$MODE\" mode"
case "$MODE" in
    local)
        mode_local
        ;;
    aur)
        mode_aur
        ;;
    aur-git)
        mode_aur_git
        ;;
    clean)
        mode_clean
        exit 0
        ;;
    test)
        mode_test
        exit 0
        ;;
    lint)
        mode_lint
        ;;
    golden)
        mode_golden
        exit 0
        ;;
esac
